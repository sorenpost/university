#+TITLE: Code to figures
#+AUTHOR: Søren Post
#+LATEX_HEADER: \setlength{\parskip}{1em} % set spaces between paragraphs to 1 character
#+LATEX_HEADER: \setlength{\parindent}{0em} % set indents for new paragraphs to 0
#+LATEX_HEADER: \usepackage{natbib}
#+LATEX_HEADER: \usepackage[a4paper, total={6in, 8in}]{geometry}
#+SETUPFILE: ./org-html-themes/setup/theme-readtheorg.setup

* RCA matrix figure

Strategi: baseret på disse to sider: https://matthewlincoln.net/2014/12/20/adjacency-matrix-plots-with-r-and-ggplot2.html og
https://jcoliver.github.io/learn-r/008-ggplot-dendrograms-and-heatmaps.html skal man re-order factors (countries) baseret på en variable (fitness) og products (complexity). Dette kan gøres ved:

1. [ ] Get RCApc values
2. [ ] Get fitness-complexity value
3. [-] Order products by their complexity, extract list of product names and set the levels of the variable
   1. [-] The RCA long needs to be ordered through complexity list, not the complexity list itself. Should be simple enough.
4. [ ] Same with countries

#+BEGIN_SRC R

# Create a character vector of node names sorted by their
# community membership. Here, I rearrange the node_list
# table by the "comm" variable, then extract the
# "name" vector
name_order <- (node_list %>% arrange(comm))$name

# Reorder edge_list "from" and "to" factor levels based on
# this new name_order
plot_data <- edge_list %>% mutate(
        to = factor(to, levels = name_order),
        from = factor(from, levels = name_order)))
#+END_SRC


Det smarteste er at arrangere en dataframe by arrange descending på fitness, gem som country_order ( + gentage processen med complexity), og re-order levels, og så lave heatmappen.

#+BEGIN_SRC R :session RCA_matrix_fig
ref_year <- 2015

#+END_SRC

- [-] Calculate RCApc for 2015
  - [-] Prepare population data
  - [ ] Prepare trade data
  - [ ] Create RCApc long
- [ ] Calculate fitness/complexity values
- [ ] Create matrix graph

** Prepare trade data

#+BEGIN_SRC R :session RCA_matrix_fig
library(tidyverse)
library(vroom)
library(here)

trade_data <- vroom(here("data/prepared/hs92_filtered_ti.csv"))

country_list <- trade_data %>%
  filter(time == ref_year) %>%
  distinct(region)

export_mat <- trade_data %>%
  filter(time == ref_year) %>%
  select(region, unit, intensity) %>%
  spread(key = unit, value = intensity) %>%
  column_to_rownames(var = "region") %>%
  as.matrix()
#+END_SRC



** Prepare population data

#+BEGIN_SRC R :session RCA_matrix_fig
library(WDI)
library(tidyverse)

pop_raw <- WDI(country = "all", indicator = "SP.POP.TOTL", extra = TRUE) %>%
  as_tibble()

pop_mat <- pop_raw %>%
  filter(year == ref_year) %>%
  select(iso3c, pop = SP.POP.TOTL) %>%
  filter(iso3c %in% country_list$region) %>%
  arrange(iso3c) %>%
  column_to_rownames(var = "iso3c") %>%
  as.matrix()

#+END_SRC

** Create RCApc matrix
#+BEGIN_SRC R :session RCA_matrix_fig


#+END_SRC
